const d=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const o of e)if(o.type==="childList")for(const n of o.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function i(e){const o={};return e.integrity&&(o.integrity=e.integrity),e.referrerpolicy&&(o.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?o.credentials="include":e.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(e){if(e.ep)return;e.ep=!0;const o=i(e);fetch(e.href,o)}};d();const l=[{title:"Harry-Potter",description:'Esta App Web fue hecha utilizando React + Typescript utilizando Vite en el frontend, el cual consume una api de <a style="color: #46ff57;" href="https://aztro.readthedocs.io/" target="_blank">Aztro</a> para tema del horoscopo y una api que hice utilizando json-server(<a style="color: #46ff57;" href="https://github.com/JuppLCD/Json-Server-HarryPotter" target="_blank">Code</a>) para obtener los datos de los personajes, frases y libros de la saga de Harry Potter.',demo:"https://harry-potter-react-ts.netlify.app/",code:"https://github.com/JuppLCD/Harry-Potter-ReactTS",keywords:"Web App, React, Typescript, Bootstrap 5, Api de Harry Potter, json-server, NodeJS"},{title:"Movies-Frontend",description:'Esta App Web fue hecha sobre una "plantilla" de una lista de reproducci\xF3n de "Yoelvis Mulen { code }" sobre aprender React. <br/><br/> Lo modifique al agregarle Typescript utilizando Vite en el frontend, esta consume una api de <a style="color: #46ff57;" href="https://www.themoviedb.org/" target="_blank">TheMovieDB</a> para obtener los datos de las pel\xEDculas, utilizando Bootstrap 5 para facilitar el dise\xF1o y un poco de Sass para modificar un poco las variables de esta. Agregue un login, para que el usuario tenga las funcionalidades de un CRUD mediante listas de pel\xEDculas. Adem\xE1s, utiliza una librer\xEDa de notificaciones para informar al usuario de sus acciones.',demo:"https://movies-jupplcd.netlify.app/",code:"https://github.com/JuppLCD/Movies-Frontend",keywords:"Web App, React, Typescript, Bootstrap 5, Api de TheMovieDB, Sass, React-Hot-Toas"},{title:"Movies-Backend",description:"Es un servidor en NodeJS utilizando Express y un ORM (Sequelize) para manejar la DB en MySQL. <br/> Esta contiene una api para manejar usuarios (login, singup) utilizando JWT para manejar la cesi\xF3n y bcryptjs para encriptar la contrase\xF1a del usuario antes de guardarla en la DB, adem\xE1s de una api tipo CRUD respecto a listas de pel\xEDculas para la App Web Movies que se puede ver en la demo.",demo:"https://movies-jupplcd.netlify.app/",code:"https://github.com/JuppLCD/Movies-app-backend",keywords:"NodeJS, Express, hapi/boom, Joi (validator Schema), MySQL, Sequelize, jsonwebtoken, bcryptjs"},{title:"ToDo",description:'Es un proyecto simple, pero lo coloco por mero gusto, ya que fue el primer proyecto en el que program\xE9 tanto en frontend como en backend aunque es poquito el c\xF3digo, podr\xEDa decir que fue un paso importante para meterme m\xE1s en el lindo mundo de la programaci\xF3n &#128518;&#128518;. <br/>Como se puede ver es un  ToDo utilizando React en Frontend y en Backend(<a style="color: #46ff57;" href="https://github.com/JuppLCD/todo-app-backend" target="_blank">Code</a>) utilizando NodeJS con Express y Mongoose para conectarme a una base de datos en MongoDB',demo:"https://todo-react-crud.herokuapp.com/",code:"https://github.com/JuppLCD/react-todo",keywords:"Web App, React, NodeJS, Express, MongoDB"},{title:"Rick-and-Morty",description:"Se utilizo la api de Rick and Morty para crear este proyecto, con la finalidad de aprender a comunicarme con apis, realizar scroll infinito y realizar busquedas con a la api y posteriormete realizar filtrado. Se utilizo React JS con Typescript, reemplaze Bootstrap y Sass con Tailwind CSS para probar este framework CSS",demo:"https://rick-and-morty-jupplcd.netlify.app/",code:"https://github.com/JuppLCD/rick-and-morty",keywords:"Web App, React, Api Rick and Morty, Tailwind CSS, Typescript"},{title:"Chat-App-Sockets",description:"El c\xF3digo original de esta app no ha sido creado por mi, sino que este ha sido modificado y refactorizado por mi. M\xE1s info en el README del repositorio de este proyecto en github. <br/> <br/> B\xE1sicamente esta app utilizaba http para hacer el pedido al backend en PHP y lo cambie a Sockets con la librer\xEDa Reatchet, adem\xE1s quer\xEDa usar POO por lo que pase mucha l\xF3gica a Clases (ya que nunca lo hab\xEDa utilizado), aunque lo hice sin mucha idea de las buenas pr\xE1cticas de POO en PHP <b> (me encuentro mejorando en el POO a la vez que estoy aprendiendo Laravel)</b>",demo:"https://github.com/JuppLCD/Chat-App-PHP",code:"https://github.com/JuppLCD/Chat-App-PHP",keywords:"PHP, MySQL, Ratchet, Sockets, Session"}],c=document.getElementById("portafolio"),p=document.getElementById("proyectInfoModal"),r=document.getElementById("proyectInfoTemplate").content;c.addEventListener("click",a=>{if(a.target.tagName==="ARTICLE"||a.target.parentNode.tagName==="ARTICLE"||a.target.parentNode.parentNode.tagName==="ARTICLE"||a.target.parentNode.parentNode.parentNode.tagName==="ARTICLE"){let t=a.target;for(;t.tagName!=="ARTICLE";)t=t.parentNode;const i=document.createDocumentFragment(),s=t.dataset.proyect,e=l.filter(n=>n.title===s)[0];r.querySelector(".modal-title span").textContent=e.title,r.querySelector(".modal-body h6").textContent=e.keywords,r.querySelector(".modal-body p").innerHTML=e.description,r.querySelector(".modal-body a.btn-warning").href=e.demo,r.querySelector(".modal-body a.btn-outline-light").href=e.code;const o=r.cloneNode(!0);i.appendChild(o),p.querySelector(".modal-dialog").innerHTML="",p.querySelector(".modal-dialog").appendChild(i)}});
